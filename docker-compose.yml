services:
  backend:
    <<: &backend
      image: "backend:dev"
      build:
        context: .
        dockerfile: ./docker/backend/Dockerfile
      depends_on:
        - db
      networks:
        - backend
        - monitoring
    command: runner

  frontend:
    image: "frontend:dev"
    build:
      context: .
      dockerfile: ./docker/frontend/Dockerfile
    depends_on:
      - backend
    networks:
      - backend
    command: runner

  db:
    image: "postgres:15.2-alpine"
    restart: unless-stopped
    volumes:
      - db_data:/var/lib/postgresql/data
      - db_data_backups:/backups
    networks:
      - backend
    environment:
      - POSTGRES_USER=secret
      - POSTGRES_PASSWORD=secret
      - POSTGRES_DB=secret

  prometheus:
    image: "prom/prometheus:v3.1.0"
    restart: unless-stopped
    volumes:
      - ./docker/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    depends_on:
      - backend
    networks:
      - monitoring

  jaeger:
    image: "jaegertracing/all-in-one:1.68.0"
    restart: unless-stopped
    networks:
      - monitoring

  grafana:
    image: "grafana/grafana:11.3.2"
    restart: unless-stopped
    volumes:
      - ./docker/grafana/provisioning/:/etc/grafana/provisioning/
      - grafana_data:/var/lib/grafana
    depends_on:
      - prometheus
    networks:
      - monitoring
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=secret
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_SERVER_SERVE_FROM_SUB_PATH=true
      - GF_SERVER_ROOT_URL=/monitoring

  minio:
    image: "minio/minio"
    restart: unless-stopped
    volumes:
      - minio_data:/data
    networks:
      - backend

volumes:
  db_data: {}
  db_data_backups: {}
  prometheus_data: {}
  grafana_data: {}
  minio_data: {}

networks:
  backend:
  monitoring:
